db.query.create-user = INSERT INTO `users` (`user_id`, `subscriber_user_id`, `reference_username`, `created_on`, `modified_on`) VALUES (:user_id, :subscriber_user_id, :reference_username, :created_on, :modified_on);
db.query.create-subscriber = INSERT INTO `subscribers` (`user_id`, `registration_date`, `expired_date`, `max_members`, `ip_address`) VALUES (:user_id, :registration_date, :expired_date, :max_members, :ip_address);
db.query.add-subscriber-service = INSERT INTO `subscribers_services` (`subscriber_user_id`, `service_id`, `api_key`, `registration_date`, `expired_date`) VALUES (:subscriber_user_id, :service_id, :api_key, :registration_date, :expired_date);
db.query.add-callback-function = INSERT INTO `callback_functions` (`api_key`, `callback_function`) VALUES (:api_key, :callback_function);
db.query.get-subscriber-info = SELECT users.reference_username, subscribers.* from subscribers join users on subscribers.user_id = users.subscriber_user_id where reference_username = :reference_username;
db.query.get-subscriber-total-members = SELECT count(users.user_id) as current_members from subscribers join users on subscribers.user_id = users.subscriber_user_id where subscriber_user_id = :subscriber_user_id;
db.query.get-user-subscriber-service-info = SELECT users.user_id as member_user_id, subscribers.expired_date as subscription_expired_date, subscribers_services.expired_date as api_expired_date from users join subscribers on users.subscriber_user_id = subscribers.user_id join subscribers_services on subscribers_services.subscriber_user_id = subscribers.user_id where reference_username = :reference_username and ip_address = :ip_address and api_key = :api_key;
db.query.get-user-service-info = SELECT * from subscribers_services where api_key = :api_key;
db.query.get-current-balance = SELECT sum(balance_in)-sum(balance_out) as current_balance from transactions where api_key = :api_key; 
db.query.add-sms-details = INSERT INTO `sms_details` (`transaction_id`, `api_key`, `sms`, `created_on`, `modified_on`) VALUES (:transaction_id, :api_key, :sms, :created_on, :modified_on);
db.query.create-sms-transaction = INSERT INTO `sms_transactions` (`transaction_id`, `cell_no`, `status_id`, `created_on`, `modified_on`) VALUES (:transaction_id, :cell_no, :status_id, :created_on, :modified_on);
db.query.create-transaction = INSERT INTO `transactions` (`transaction_id`, `api_key`, `balance_in`, `balance_out`, `status_id`, `type_id`, `package_id`, `cell_no`, `description`, `editable` , `created_on`, `modified_on`) VALUES (:transaction_id, :api_key, :balance_in, :balance_out, :status_id, :type_id, :package_id , :cell_no, :description, :editable, :created_on, :modified_on);
db.query.add-service = INSERT INTO `services` (`id`, `title`) VALUES (:id, :title);
db.query.add-sim = INSERT INTO `sims` (`sim_no`, `identifier`, `description`, `status`, `created_on`, `modified_on`) VALUES (:sim_no, :identifier, :description, :status, :created_on, :modified_on);
db.query.add-sim-service = INSERT INTO `sims_services` (`sim_no`, `service_id`, `category_id`, `current_balance`, `created_on`, `modified_on`) VALUES (:sim_no, :service_id, :category_id, :current_balance, :created_on, :modified_on);
db.query.get-sim-info = SELECT * from sims where sim_no = :sim_no; 
db.query.get-sim-service-info = SELECT sims.identifier, sims.description, sims.status, sims_services.* from sims join sims_services on sims.sim_no = sims_services.sim_no where sims_services.sim_no = :sim_no; 
db.query.get-all-sims = SELECT * from sims where identifier = :identifier ORDER BY description ASC; 
db.query.get-all-sims-services = SELECT sims.description, sims.identifier, sims.status, sims_services.* from sims join sims_services on sims.sim_no = sims_services.sim_no where identifier = :identifier ORDER BY description ASC; 
db.query.update-sim-info = UPDATE `sims` set `identifier` = :identifier, `description` = :description, `status` = :status where `sim_no` = :sim_no;
db.query.update-sim-service-balance-info = UPDATE `sims_services` set `current_balance` = :current_balance, `modified_on` = :modified_on where `sim_no` = :sim_no and `service_id` = :service_id;
db.query.get-transaction-info = SELECT * from transactions where `transaction_id` = :transaction_id;
db.query.get-editable-transaction-info = SELECT transactions.*, subscribers_services.service_id, subscribers_services.process_type_id from transactions join subscribers_services on transactions.api_key=subscribers_services.api_key where `editable` = :editable;
db.query.update-transaction-info = UPDATE `transactions` set `api_key` = :api_key, `balance_in` = :balance_in, `balance_out` = :balance_out, `status_id` = :status_id, `type_id` = :type_id, `package_id` = :package_id, `cell_no` = :cell_no, `description` = :description, `editable` = :editable where `transaction_id` = :transaction_id;
db.query.update-transaction-status = UPDATE `transactions` set `status_id` = :status_id where `transaction_id` = :transaction_id;
db.query.update-transaction-status-ls = UPDATE `transactions` set `status_id` = :status_id, `sender_cell_no` = :sender_cell_no, `trx_id_operator` = :trx_id_operator where `transaction_id` = :transaction_id;
db.query.get-transaction-id-ls-stk = SELECT transaction_id from transactions where `api_key` = :api_key AND `cell_no` = :cell_no AND `balance_out` = :balance_out AND `status_id` = :status_id ORDER BY `created_on` DESC LIMIT 1;
db.query.get-base-url-op-code = SELECT base_url from subscribers where `op_code` = :op_code;
db.query.get-base-url-transaction-id = SELECT base_url from subscribers join subscribers_services on subscribers.user_id = subscribers_services.subscriber_user_id join transactions on subscribers_services.api_key = transactions.api_key where transactions.transaction_id = :transaction_id; 
db.query.get-local-server-identifier = SELECT ls_identifier from subscribers join subscribers_services on subscribers.user_id = subscribers_services.subscriber_user_id where subscribers_services.api_key = :api_key; 
db.query.add-sim-message = INSERT INTO `sims_messages` (`country_code`, `sim_no`, `sender`, `sms`, `created_on`, `modified_on`) VALUES (:country_code, :sim_no, :sender, :sms, :created_on, :modified_on);
db.query.get-sim-messages = SELECT * from sims_messages where `sim_no` = :sim_no AND `created_on` >= :start_time AND `created_on` <= :end_time  ORDER BY `id` DESC LIMIT :offset,:limit;
db.query.get-sim-total-messages = SELECT count(*) as total_messages from sims_messages where `sim_no` = :sim_no AND `created_on` >= :start_time AND `created_on` <= :end_time ORDER BY `id` DESC;
db.query.get-all-sim-messages = SELECT * from sims_messages where `sim_no` = :sim_no AND `created_on` >= :start_time AND `created_on` <= :end_time ORDER BY `id` DESC;